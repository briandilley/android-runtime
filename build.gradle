/*
*	Usage: 
*		gradlew - Builds the NativeScript Android App Package using an application project template.
		gradlew -PgitCommitVersion - sets the commit version of the build
		gradlew -PpreReleaseVersion - sets the pre-release version of the build (as per semver spec "-alpha" value results in 1.0.0-alpha)

*/

defaultTasks 'createPackage'

import groovy.json.JsonSlurper

import groovy.json.JsonBuilder
import groovy.json.JsonOutput

def isWinOs = System.properties['os.name'].toLowerCase().contains('windows')
def localMetadataGen = "../android-metadata-generator/dist/tns-android-metadata-generator-0.0.1.tgz"
def distDir = "$projectDir/dist"
def pVersion = "no package version was provided by build.gradle build"
def arVersion = "no commit sha was provided by build.gradle build"
def generateRegularRuntimePackage = !project.hasProperty("skipUnoptimized");

task checkEnvironmentVariables {
    if ("$System.env.JAVA_HOME" == "" || "$System.env.JAVA_HOME" == "null") {
        throw new GradleException("Set JAVA_HOME to point to the correct Jdk location\n");
    }

    if ("$System.env.ANDROID_HOME" == "" || "$System.env.ANDROID_HOME" == "null") {
        throw new GradleException("Set ANDROID_HOME to point to the correct Android SDK location\n");
    }

    if ("$System.env.GIT_COMMIT" == "null" && !project.hasProperty("gitCommitVersion")) {
        logger.warn("Warning: The GIT_COMMIT is not set. This NativeScript Android Runtime will not be tagged with the git commit it is build from\n");
    }

    if (project.hasProperty("metadataGen") && !file("../android-metadata-generator/dist/tns-android-metadata-generator-0.0.1.tgz").exists()) {
        throw new GradleException("android-metadata-generator build output not found and no metadataGen option specified. Build android-metadata-generator first.\n");
    }
}

task cleanDistDir(type: Delete) {
    delete distDir
}

task createDistDir {
    doLast {
        def distF = new File(distDir)
        distF.mkdirs()
    }
}

task getPackageVersion {
    doLast {
        String content = new File("$rootDir/package.json").getText("UTF-8")
        def jsonSlurper = new JsonSlurper()
        def packageJsonMap = jsonSlurper.parseText(content)

        pVersion = packageJsonMap.version

        println "Using runtime version from package.json '${pVersion}'"

        if (project.hasProperty("packageVersion")) {
            pVersion += "-" + packageVersion

            println "Using packageVersion property '${pVersion}'"
        }


        if (project.hasProperty("preReleaseVersion")) {
            pVersion += "-" + preReleaseVersion

            println "Adding preReleaseVersion property '${pVersion}' to package version"
        }

        println "The package version is '${pVersion}'"
    }
}

task getCommitVersion {
    doLast {
        if (project.hasProperty("gitCommitVersion")) {
            println "Using commit version property " + gitCommitVersion
            arVersion = gitCommitVersion
        } else if ("$System.envcleanBuildArtefacts.GIT_COMMIT" != "null") {
            println "Using commit version environment variable " + $System.env.GIT_COMMIT
            String content = "$System.env.GIT_COMMIT"
            arVersion = content.trim()
        }
    }
}

task generateSbgJar(type: Exec) {
    doFirst {
        workingDir "$rootDir/test-app"
        if (isWinOs) {
            commandLine "cmd", "/c", "gradlew", ":static-binding-generator:jar"
        } else {
            commandLine "./gradlew", ":static-binding-generator:jar"
        }
    }
}

task generateMdgJar(type: Exec) {
    doFirst {
        workingDir "$rootDir/test-app"
        if (isWinOs) {
            commandLine "cmd", "/c", "gradlew", ":android-metadata-generator:jar"
        } else {
            commandLine "./gradlew", ":android-metadata-generator:jar"
        }
    }
}

task generateRuntime {
    doFirst {
        tasks.generateOptimizedRuntimeAar.execute();

        if (generateRegularRuntimePackage) {
            tasks.generateRuntimeAar.execute();
        }
    }
}

task generateOptimizedRuntimeAar(type: Exec) {
    doFirst {
        workingDir "$rootDir/test-app"
        if (isWinOs) {
            commandLine "cmd", "/c", "gradlew", "assembleRelease", "-PpackageVersion=${pVersion}", "-PgitCommitVersion=${arVersion}", "-Poptimized"
        } else {
            commandLine "./gradlew", "assembleRelease", "-PpackageVersion=${pVersion}", "-PgitCommitVersion=${arVersion}", "-Poptimized"
        }
    }
}

task generateRuntimeAar(type: Exec) {
    doFirst {
        workingDir "$rootDir/test-app"
        if (isWinOs) {
            commandLine "cmd", "/c", "gradlew", "assembleRelease", "-PpackageVersion=${pVersion}", "-PgitCommitVersion=${arVersion}"
        } else {
            commandLine "./gradlew", "assembleRelease", "-PpackageVersion=${pVersion}", "-PgitCommitVersion=${arVersion}"
        }
    }
}

task copyFilesToProjectTemeplate {
    doLast {
        copy {
            from "$rootDir/test-app/app/src/main/java/com/tns/ErrorReport.java"
            from "$rootDir/test-app/app/src/main/java/com/tns/ErrorReportActivity.java"
            from "$rootDir/test-app/app/src/main/java/com/tns/NativeScriptSyncService.java"
            into "$rootDir/dist/framework/app/src/debug/java/com/tns/"
        }
        copy {
            from "$rootDir/test-app/app/src/main/assets/internal"
            into "$rootDir/dist/framework/app/src/main/assets/internal"
        }
        copy {
            from "$rootDir/test-app/app/src/main/java/com/tns/AndroidJsV8Inspector.java"
            from "$rootDir/test-app/app/src/main/java/com/tns/DefaultExtractPolicy.java"
            from "$rootDir/test-app/app/src/main/java/com/tns/LogcatLogger.java"
            from "$rootDir/test-app/app/src/main/java/com/tns/NativeScriptApplication.java"
            from "$rootDir/test-app/app/src/main/java/com/tns/NativeScriptUncaughtExceptionHandler.java"
            from "$rootDir/test-app/app/src/main/java/com/tns/RuntimeHelper.java"
            from "$rootDir/test-app/app/src/main/java/com/tns/Util.java"
            into "$rootDir/dist/framework/app/src/main/java/com/tns/"
        }
        copy {
            from "$rootDir/test-app/app/src/main/java/com/tns/internal"
            into "$rootDir/dist/framework/app/src/main/java/com/tns/internal"
        }
        copy {
            from "$rootDir/test-app/build-tools/static-binding-generator.jar"
            from "$rootDir/test-app/build-tools/static-binding-generator/"
            into "$rootDir/dist/framework/build-tools"
        }
        copy {
            from "$rootDir/android-static-binding-generator/project"
            exclude "build", "interface-name-generator", "libs", "src", "*.txt", "*.iml"

            into "$rootDir/dist/framework/build-tools/android-static-binding-generator"
        }
        copy {
            from "$rootDir/test-app/build-tools/android-metadata-generator.jar"
            into "$rootDir/dist/framework/build-tools"
        }
        copy {
            from "$rootDir/test-app/runtime/build/outputs/aar/runtime-regular-release.aar"
            into "$rootDir/dist/framework/app/libs/runtime-libs"
            rename "runtime-regular-release.aar", "nativescript-regular.aar"
        }
        copy {
            from "$rootDir/test-app/runtime/build/outputs/aar/runtime-optimized-release.aar"
            into "$rootDir/dist/framework/app/libs/runtime-libs"
            rename "runtime-optimized-release.aar", "nativescript-optimized.aar"
        }
        copy {
            from "$rootDir/test-app/app/build.gradle"
            into "$rootDir/dist/framework/app"
        }
        copy {
            from "$rootDir/test-app/build.gradle"
            into "$rootDir/dist/framework"
        }
    }
}

task copyProjectTemplate(type: Copy) {
    from "$rootDir/build-artifacts/project-template-gradle"
    into "$rootDir/dist/framework"
}

task copyPackageJson(type: Copy) {
    from "$rootDir/package.json"
    into "$rootDir/dist"
}

task setPackageVersionInPackageJsonFile {
    doLast {
        def inputFile = new File("$rootDir/dist/package.json")
        def json = new JsonSlurper().parseText(inputFile.text)
        json.version = pVersion
        def jb = new JsonBuilder(json);
        inputFile.text = JsonOutput.prettyPrint(jb.toString())
    }
}

task copyReadme(type: Copy) {
    from "README.md"
    into "$rootDir/dist"
}

task createNpmPackage(type: Exec) {
    doFirst {
        workingDir "$rootDir/dist"

        if (isWinOs) {
            commandLine "cmd", "/c", "npm", "pack"
        } else {
            commandLine "npm", "pack"
        }
    }
}

task cleanBuildArtefacts(type: Delete) {
    delete "$rootDir/build-artifacts/project-template-gradle/app/src/debug/java"
    delete "$rootDir/build-artifacts/project-template-gradle/app/src/main/java"
    delete "$rootDir/build-artifacts/project-template-gradle/app/src/main/assets"
}

//clean and set up dirs
copyFilesToProjectTemeplate.dependsOn(cleanDistDir)

//copy framework structure
createDistDir.dependsOn(copyFilesToProjectTemeplate)
copyProjectTemplate.dependsOn(createDistDir)
copyPackageJson.dependsOn(copyProjectTemplate)

copyStaticBindingGeneratorProject.dependsOn(copyPackageJson)
//generate static binding generator and copy into project template
generateInterfaceNameGenerator.dependsOn(copyStaticBindingGeneratorProject)
copyInterfaceNameGeneratorJar.dependsOn(generateInterfaceNameGenerator)
generateStaticBindingGeneratorJar.dependsOn(copyInterfaceNameGeneratorJar)
copyGeneratedStaticBindingGeneratorJar.dependsOn(generateStaticBindingGeneratorJar)

//get version from package json
getPackageVersion.dependsOn(copyGeneratedStaticBindingGeneratorJar)
getCommitVersion.dependsOn(getPackageVersion)

//generate runtime and copy into framework structure
generateRuntime.dependsOn(getCommitVersion)

setPackageVersionInPackageJsonFile.dependsOn(generateRuntime)

//generateRuntime.dependsOn(build)

tasks.whenTaskAdded { task ->
    if (task.getName() == "build") {
        generateRuntime
    }
}

copyGeneratedRuntime.dependsOn(generateRuntime)

//generate metadata generator and copy into framework structure
generateMetadataGeneratorJar.dependsOn(copyGeneratedRuntime)
copyGeneratedMetadataGeneratorJar.dependsOn(generateMetadataGeneratorJar)

copyReadme.dependsOn(copyGeneratedMetadataGeneratorJar)

//pack runtime
setPackageVersionInPackageJsonFile.dependsOn(copyReadme)
createNpmPackage.dependsOn(setPackageVersionInPackageJsonFile)
cleanBuildArtefacts.dependsOn(createNpmPackage)

task createPackage {
    description "Builds the NativeScript Android cleanBuildArtefactsApp Package using an application project template."
    dependsOn cleanDistDir,
            createDistDir,

            copyProjectTemplate,

            copyPackageJson,

            copyStaticBindingGeneratorProject,
            generateStaticBindingGeneratorJar,
            copyGeneratedStaticBindingGeneratorJar,

            getPackageVersion,
            getCommitVersion,

            generateRuntime,

            setPackageVersionInPackageJsonFile,

            copyGeneratedRuntime,
            generateMetadataGeneratorJar,
            copyGeneratedMetadataGeneratorJar,
            copyReadme,
            createNpmPackage,
            cleanBuildArtefacts

    println "Creating NativeScript Android Package"
}
